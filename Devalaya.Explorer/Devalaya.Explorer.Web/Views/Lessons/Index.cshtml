@model List<Lesson>
@{
    ViewData["Title"] = "Lesson Page";
    Layout = "_Layout";
}

<section class="container my-5">
    <h1 class="text-center text-uppercase fw-bold mb-5" style="color: black;">
        <i class="fa-solid fa-om text-warning mx-2"></i>
        Seeds of Knowledge From Holy Books
        <i class="fa-solid fa-om text-warning mx-2"></i>
    </h1>

    <div class="row justify-content-center mb-4">
        <div class="col-md-6 position-relative">
            <input type="text" id="searchInput" class="form-control rounded-pill border-primary shadow-sm" placeholder="Search by source..." autocomplete="off" />
            <div class="list-group mt-2 position-absolute w-100" id="suggestions" style="z-index: 10;"></div>
        </div>
    </div>

    <div id="lessonsContainer">
        @foreach (var lesson in Model)
        {
            <div class="quotecard d-flex align-items-center mt-2 p-3 bg-white rounded shadow-sm" data-source="@lesson.Source.Trim()">
                <img src="~/images/black-1.webp" class="rounded-circle me-3" style="width: 60px; height: 60px;" alt="Avatar" />
                <div>
                    <p class="mb-1 blockquote">@lesson.Quote</p>
                    <small class="text-primary fw-bold">- @lesson.Source</small>
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('searchInput');
            const suggestions = document.getElementById('suggestions');
            const lessonsContainer = document.getElementById('lessonsContainer');

            const lessonCards = Array.from(lessonsContainer.querySelectorAll('.quotecard'));

            // Hide all lessons initially
            lessonCards.forEach(card => card.style.display = 'none');

            // Collect all unique sources (trimmed)
            const allSources = [...new Set(lessonCards.map(card => card.getAttribute('data-source').trim()))];

            function showSuggestions(query) {
                const filtered = allSources.filter(src => src.toLowerCase().includes(query.toLowerCase()));
                if (filtered.length > 0 && query !== '') {
                    suggestions.innerHTML = filtered.map(src => `
                        <button type="button" class="list-group-item list-group-item-action text-start" onclick="selectSource(${JSON.stringify(src)})">
                            ${src}
                        </button>
                    `).join('');
                    suggestions.style.display = 'block';
                } else {
                    suggestions.innerHTML = '';
                    suggestions.style.display = 'none';
                }
            }

            window.selectSource = function(source) {
                searchInput.value = source;
                lessonCards.forEach(card => {
                    if (card.getAttribute('data-source').trim() === source) {
                        card.style.display = 'flex';
                    } else {
                        card.style.display = 'none';
                    }
                });
                suggestions.innerHTML = '';
                suggestions.style.display = 'none';
            }

            searchInput.addEventListener('input', () => {
                showSuggestions(searchInput.value.trim());
            });

            searchInput.addEventListener('focus', () => {
                showSuggestions(searchInput.value.trim());
            });

            document.addEventListener('click', function(event) {
                if (!searchInput.contains(event.target) && !suggestions.contains(event.target)) {
                    suggestions.style.display = 'none';
                }
            });
        });
    </script>
}
